<?xml version="1.0" encoding="utf-8"?>
<html>
  <head>
    <meta charset="UTF-8"/>
    <title>plank &ndash; Vala Binding Reference</title>
    <link href="devhelpstyle.css" rel="stylesheet" type="text/css"/><script src="scripts.js" type="text/javascript">
    </script>
  </head>
  <body>
    <div class="site_header">plank Reference Manual</div>
    <div class="site_body">
      <div class="site_content">
        <h1 class="main_title" id="plank">plank</h1>
        <hr class="main_hr"/>
        <h2 class="main_title">Description:</h2>
        <h2 class="main_title">Content:</h2>
        <h3 class="main_title">Namespaces:</h3>
        <ul class="navi_inline">
          <li class="namespace"><a href="Plank.html">Plank</a></li>
          <h3 class="main_title">Interfaces:</h3>
          <ul class="navi_inline">
            <li class="interface"><a href="Plank.Docklet.html">Docklet</a> - <span class="brief_description">The common interface for all docklets.
              </span></li>
            <li class="interface"><a href="Plank.Serializable.html">Serializable</a> - <span class="brief_description">This interface is used by 
                objects that need to be serialized in a Preferences. The object must have a string representation and provide these methods to 
                translate between the string and object representations.</span></li>
            <li class="interface"><a href="Plank.UnityClient.html">UnityClient</a> - <span class="brief_description">The interface to provide the 
                LauncherEntry handling.</span></li>
          </ul>
          <h3 class="main_title">Classes:</h3>
          <ul class="navi_inline">
            <li class="class"><a href="Plank.DBusManager.html">DBusManager</a> - <span class="brief_description">Handles all the exported DBus 
                functions of the dock</span></li>
            <li class="class"><a href="Plank.DockController.html">DockController</a> - <span class="brief_description">A controller class for managing
                a single dock.</span></li>
            <li class="class"><a href="Plank.DockPreferences.html">DockPreferences</a> - <span class="brief_description">Contains all preferences for 
                docks.</span></li>
            <li class="class"><a href="Plank.DockRenderer.html">DockRenderer</a> - <span class="brief_description">Handles all of the drawing for a 
                dock.</span></li>
            <li class="class"><a href="Plank.DragManager.html">DragManager</a> - <span class="brief_description">Handles all of the drag'n'drop events
                for a dock.</span></li>
            <li class="class"><a href="Plank.HideManager.html">HideManager</a> - <span class="brief_description">Handles checking if a dock should 
                hide or not.</span></li>
            <li class="class"><a href="Plank.PositionManager.html">PositionManager</a> - <span class="brief_description">Handles computing any 
                size/position information for the dock.</span></li>
            <li class="class"><a href="Plank.DBusClient.html">DBusClient</a> - <span class="brief_description">Connects to a running instance of plank
                via DBus and provides remote interface to a currently runnning dock.</span></li>
            <li class="abstract_class"><a href="Plank.DockletItem.html">DockletItem</a></li>
            <li class="class"><a href="Plank.DockletManager.html">DockletManager</a> - <span class="brief_description">A controller class for managing
                all available docklets.</span></li>
            <li class="class"><a href="Plank.DrawingService.html">DrawingService</a> - <span class="brief_description">Utility service for loading 
                icons and working with pixbufs.</span></li>
            <li class="class"><a href="Plank.DockTheme.html">DockTheme</a> - <span class="brief_description">A themed renderer for dock windows.
              </span></li>
            <li class="abstract_class"><a href="Plank.Renderer.html">Renderer</a> - <span class="brief_description">Handles animated rendering. Uses a
                timer and continues requesting redraws for a widget until no more animation is needed.</span></li>
            <li class="class"><a href="Plank.Surface.html">Surface</a> - <span class="brief_description">A surface is a wrapper class for a 
                <span class="class">Cairo.Surface</span>. It encapsulates a surface/context and provides utility methods.</span></li>
            <li class="class"><a href="Plank.SurfaceCache.html">SurfaceCache</a> - <span class="brief_description">Cache multiple sizes of the assumed
                same image</span></li>
            <li class="abstract_class"><a href="Plank.Theme.html">Theme</a> - <span class="brief_description">A themed renderer for windows.</span>
            </li>
            <li class="abstract_class"><a href="Plank.AbstractMain.html">AbstractMain</a> - <span class="brief_description">The main class for all 
                dock applications. All docks should extend this class. In the constructor, the string fields should be initialized to customize the 
                dock.</span></li>
            <li class="class"><a href="Plank.Factory.html">Factory</a> - <span class="brief_description">The main factory class for the dock.</span>
            </li>
            <li class="class"><a href="Plank.ItemFactory.html">ItemFactory</a> - <span class="brief_description">An item factory. Creates 
                <a href="Plank.DockItem.html" class="abstract_class">DockItem</a>s based on .dockitem files.</span></li>
            <li class="class"><a href="Plank.ApplicationDockItem.html">ApplicationDockItem</a> - <span class="brief_description">A dock item for 
                applications (with .desktop launchers).</span></li>
            <li class="class"><a href="Plank.ApplicationDockItemProvider.html">ApplicationDockItemProvider</a> - <span class="brief_description">A 
                container and controller class for managing application dock items on a dock.</span></li>
            <li class="class"><a href="Plank.DefaultApplicationDockItemProvider.html">DefaultApplicationDockItemProvider</a> - 
              <span class="brief_description">The default container and controller class for managing application dock items on a dock.</span></li>
            <li class="abstract_class"><a href="Plank.DockContainer.html">DockContainer</a> - <span class="brief_description">A container and 
                controller class for managing dock elements on a dock.</span></li>
            <li class="abstract_class"><a href="Plank.DockElement.html">DockElement</a> - <span class="brief_description">The base class for all dock 
                elements.</span></li>
            <li class="abstract_class"><a href="Plank.DockItem.html">DockItem</a> - <span class="brief_description">The base class for all dock items.
              </span></li>
            <li class="class"><a href="Plank.DockItemDrawValue.html">DockItemDrawValue</a> - <span class="brief_description">Contains all positions 
                and modifications to draw a dock-item on the dock</span></li>
            <li class="class"><a href="Plank.DockItemProvider.html">DockItemProvider</a> - <span class="brief_description">A container and controller 
                class for managing dock items.</span></li>
            <li class="class"><a href="Plank.DockItemPreferences.html">DockItemPreferences</a> - <span class="brief_description">Contains preference 
                keys for a dock item.</span></li>
            <li class="class"><a href="Plank.FileDockItem.html">FileDockItem</a> - <span class="brief_description">A dock item for files or folders on
                the dock.</span></li>
            <li class="class"><a href="Plank.PlaceholderDockItem.html">PlaceholderDockItem</a> - <span class="brief_description">A dock item as a 
                placeholder for the dock itself if nothing was added yet.</span></li>
            <li class="class"><a href="Plank.PlankDockItem.html">PlankDockItem</a> - <span class="brief_description">A dock item for the dock itself. 
                Has things like about, help, quit etc.</span></li>
            <li class="class"><a href="Plank.TransientDockItem.html">TransientDockItem</a> - <span class="brief_description">A dock item for 
                applications which aren't pinned or doesn't have a matched desktop-files.</span></li>
            <li class="class"><a href="Plank.Logger.html">Logger</a> - <span class="brief_description">A logging class to display all console messages
                in a nice colored format.</span></li>
            <li class="class"><a href="Plank.Paths.html">Paths</a> - <span class="brief_description">A wrapper class that gives static instances of 
                <span class="interface">GLib.File</span> for commonly used paths. Most paths are retrieved from <span class="namespace">
                  GLib.Environment</span>, which on Linux uses the XDG Base Directory specification (see 
                <a href="http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html" target="_blank">
                  http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html</a>).</span></li>
            <li class="abstract_class"><a href="Plank.Preferences.html">Preferences</a> - <span class="brief_description">The base class for all 
                preferences in the system. Preferences are serialized to files. The file is watched for changes and loads new values if the backing 
                file changed. When any public property of a sub-class is changed, the public properties are serialized to the backing file.</span>
            </li>
            <li class="abstract_class"><a href="Plank.Settings.html">Settings</a> - <span class="brief_description">The base class for gsettings-based
                configuration classes. Defined properties will be bound to the corresponing schema-key of the given schema-path. The property's nick-
                name must match the schema-key.</span></li>
            <li class="class"><a href="Plank.System.html">System</a> - <span class="brief_description">A utility class for launching applications and 
                opening files/URIs.</span></li>
            <li class="class"><a href="Plank.Unity.html">Unity</a> - <span class="brief_description">Handle the LauncherEntry DBus interface 
                implemented by applications.</span></li>
            <li class="class"><a href="Plank.Worker.html">Worker</a></li>
            <li class="class"><a href="Plank.CompositedWindow.html">CompositedWindow</a> - <span class="brief_description">A <span class="class">
                  Gtk.Window</span> with compositing support enabled. The default expose event will draw a completely transparent window.</span></li>
            <li class="class"><a href="Plank.DockWindow.html">DockWindow</a> - <span class="brief_description">The main window for all docks.</span>
            </li>
            <li class="class"><a href="Plank.HoverWindow.html">HoverWindow</a> - <span class="brief_description">A hover window that shows labels for 
                dock items. This window floats outside (but near) the dock.</span></li>
            <li class="class"><a href="Plank.PoofWindow.html">PoofWindow</a> - <span class="brief_description">An animated window that draws a 'poof' 
                animation. Used when dragging items off the dock.</span></li>
            <li class="class"><a href="Plank.PreferencesWindow.html">PreferencesWindow</a></li>
            <li class="class"><a href="Plank.TitledSeparatorMenuItem.html">TitledSeparatorMenuItem</a> - <span class="brief_description">A 
                <span class="class">Gtk.SeparatorMenuItem</span> with a title on it. The separator can be drawn with or without a line.</span></li>
          </ul>
          <h3 class="main_title">Structs:</h3>
          <ul class="navi_inline">
            <li class="struct"><a href="Plank.Color.html">Color</a> - <span class="brief_description">Represents a RGBA color and has methods for 
                manipulating the color.</span></li>
            <li class="struct"><a href="Plank.PointD.html">PointD</a></li>
          </ul>
          <h3 class="main_title">Enums:</h3>
          <ul class="navi_inline">
            <li class="enum"><a href="Plank.HideType.html">HideType</a> - <span class="brief_description">If/How the dock should hide itself.</span>
            </li>
            <li class="enum"><a href="Plank.AnimationMode.html">AnimationMode</a> - <span class="brief_description">The available animation modes
              </span></li>
            <li class="enum"><a href="Plank.SurfaceCacheFlags.html">SurfaceCacheFlags</a> - <span class="brief_description">Controls some internal 
                behaviors of a <a href="Plank.SurfaceCache.html" class="class">Plank.SurfaceCache</a></span></li>
            <li class="enum"><a href="Plank.AnimationType.html">AnimationType</a> - <span class="brief_description">What type of animation to perform 
                when an item is or was interacted with.</span></li>
            <li class="enum"><a href="Plank.IndicatorState.html">IndicatorState</a> - <span class="brief_description">What item indicator to show.
              </span></li>
            <li class="enum"><a href="Plank.ItemState.html">ItemState</a> - <span class="brief_description">The current activity state of an item. The
                item has several states to track and can be in any combination of them.</span></li>
            <li class="enum"><a href="Plank.PopupButton.html">PopupButton</a> - <span class="brief_description">What mouse button pops up the context 
                menu on an item. Can be multiple buttons.</span></li>
            <li class="enum"><a href="Plank.XdgSessionClass.html">XdgSessionClass</a></li>
            <li class="enum"><a href="Plank.XdgSessionDesktop.html">XdgSessionDesktop</a></li>
            <li class="enum"><a href="Plank.XdgSessionType.html">XdgSessionType</a></li>
            <li class="enum"><a href="Plank.LogLevel.html">LogLevel</a> - <span class="brief_description">Controls what messages show in the console 
                log.</span></li>
            <li class="enum"><a href="Plank.TaskPriority.html">TaskPriority</a></li>
          </ul>
          <h3 class="main_title">Constants:</h3>
          <ul class="navi_inline">
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_keyword">unowned</span> <span class="main_basic_type"><span class="class">string</span></span> <b><a href="Plank.G_RESOURCE_PATH.html" class="constant">G_RESOURCE_PATH</a></b>
              </span>
              <div class="leaf_brief_description">
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Plank.MAJOR_VERSION.html" class="constant">MAJOR_VERSION</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Like get_major_version, but from the headers used at application 
                  compile time, rather than from the library linked against at application run time</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Plank.MINOR_VERSION.html" class="constant">MINOR_VERSION</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Like get_minor_version, but from the headers used at application 
                  compile time, rather than from the library linked against at application run time</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Plank.MICRO_VERSION.html" class="constant">MICRO_VERSION</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Like get_micro_version, but from the headers used at application 
                  compile time, rather than from the library linked against at application run time</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Plank.NANO_VERSION.html" class="constant">NANO_VERSION</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Like get_nano_version, but from the headers used at application 
                  compile time, rather than from the library linked against at application run time</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_keyword">unowned</span> <span class="main_basic_type"><span class="class">string</span></span> <b><a href="Plank.DOCKLET_ENTRY_POINT.html" class="constant">DOCKLET_ENTRY_POINT</a></b>
              </span>
              <div class="leaf_brief_description">
              </div></li>
          </ul>
          <h3 class="main_title">Delegates:</h3>
          <ul class="navi_inline">
            <li class="delegate"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">delegate</span> <span class="main_keyword">void</span> <b><a href="Plank.DockletInitFunc.html" class="delegate">DockletInitFunc</a></b> (<span class="main_type"><a href="Plank.DockletManager.html" class="class">DockletManager</a></span> manager)
              </span>
              <div class="leaf_brief_description">
              </div></li>
            <li class="delegate"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">delegate</span> <span class="main_type"><a href="Plank.Surface.html" class="class">Surface</a></span>? <b><a href="Plank.DrawFunc.html" class="delegate">DrawFunc</a></b> (<span class="main_basic_type"><span class="struct">int</span></span> width, <span class="main_basic_type"><span class="struct">int</span></span> height, <span class="main_type"><a href="Plank.Surface.html" class="class">Surface</a></span> model, <span class="main_type"><a href="Plank.DrawDataFunc.html" class="delegate">DrawDataFunc</a></span>&lt;<span class="main_type"><span>G</span></span>&gt;? draw_data_func)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Creates a new surface based on the given information</span>
              </div></li>
            <li class="delegate"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">delegate</span> <span class="main_type"><a href="Plank.Surface.html" class="class">Surface</a></span>? <b><a href="Plank.DrawDataFunc.html" class="delegate">DrawDataFunc</a></b> (<span class="main_basic_type"><span class="struct">int</span></span> width, <span class="main_basic_type"><span class="struct">int</span></span> height, <span class="main_type"><a href="Plank.Surface.html" class="class">Surface</a></span> model, <span class="main_type"><span>G</span></span> data)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Creates a new surface using the given element and information</span>
              </div></li>
            <li class="delegate"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">delegate</span> <span class="main_keyword">void</span> <b><a href="Plank.DrawValueFunc.html" class="delegate">DrawValueFunc</a></b> (<span class="main_type"><a href="Plank.DockItem.html" class="abstract_class">DockItem</a></span> item, <span class="main_type"><a href="Plank.DockItemDrawValue.html" class="class">DockItemDrawValue</a></span> draw_value)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Modify the given DrawItemValue</span>
              </div></li>
            <li class="delegate"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">delegate</span> <span class="main_keyword">void</span> <b><a href="Plank.DrawValuesFunc.html" class="delegate">DrawValuesFunc</a></b> (<span class="main_type"><span class="class">HashMap</span></span>&lt;<span class="main_type"><a href="Plank.DockElement.html" class="abstract_class">DockElement</a></span>,<span class="main_type"><a href="Plank.DockItemDrawValue.html" class="class">DockItemDrawValue</a></span>&gt; draw_values)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Modify all given DrawItemValues</span>
              </div></li>
            <li class="delegate"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">delegate</span> <span class="main_type"><span>G</span></span> <b><a href="Plank.TaskFunc.html" class="delegate">TaskFunc</a></b> () <span class="main_keyword">throws</span> <span class="main_type"><span class="class">Error</span></span>
              </span>
              <div class="leaf_brief_description">
              </div></li>
          </ul>
          <h3 class="main_title">Methods:</h3>
          <ul class="navi_inline">
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="struct">uint</span></span> <b><a href="Plank.get_major_version.html" class="method">get_major_version</a></b> ()
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Returns the major version number of the plank library.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="struct">uint</span></span> <b><a href="Plank.get_minor_version.html" class="method">get_minor_version</a></b> ()
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Returns the minor version number of the plank library.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="struct">uint</span></span> <b><a href="Plank.get_micro_version.html" class="method">get_micro_version</a></b> ()
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Returns the micro version number of the plank library.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="struct">uint</span></span> <b><a href="Plank.get_nano_version.html" class="method">get_nano_version</a></b> ()
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Returns the nano version number of the plank library.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">unowned</span> <span class="main_basic_type"><span class="class">string</span></span>? <b><a href="Plank.check_version.html" class="method">check_version</a></b> (<span class="main_basic_type"><span class="struct">uint</span></span> required_major, <span class="main_basic_type"><span class="struct">uint</span></span> required_minor, <span class="main_basic_type"><span class="struct">uint</span></span> required_micro)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Checks that the plank library in use is compatible with the given 
                  version.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="struct">double</span></span> <b><a href="Plank.easing_for_mode.html" class="method">easing_for_mode</a></b> (<span class="main_type"><a href="Plank.AnimationMode.html" class="enum">AnimationMode</a></span> mode, <span class="main_basic_type"><span class="struct">double</span></span> t, <span class="main_basic_type"><span class="struct">double</span></span> d)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Calculate an interpolated value for selected animation-mode, and 
                  given elapsed time and total duration.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Plank.environment_initialize.html" class="method">environment_initialize</a></b> ()
              </span>
              <div class="leaf_brief_description">
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="struct">bool</span></span> <b><a href="Plank.environment_is_session_class.html" class="method">environment_is_session_class</a></b> (<span class="main_type"><a href="Plank.XdgSessionClass.html" class="enum">XdgSessionClass</a></span> type)
              </span>
              <div class="leaf_brief_description">
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="struct">bool</span></span> <b><a href="Plank.environment_is_session_desktop.html" class="method">environment_is_session_desktop</a></b> (<span class="main_type"><a href="Plank.XdgSessionDesktop.html" class="enum">XdgSessionDesktop</a></span> type)
              </span>
              <div class="leaf_brief_description">
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="struct">bool</span></span> <b><a href="Plank.environment_is_session_type.html" class="method">environment_is_session_type</a></b> (<span class="main_type"><a href="Plank.XdgSessionType.html" class="enum">XdgSessionType</a></span> type)
              </span>
              <div class="leaf_brief_description">
              </div></li>
          </ul>
        </ul>
      </div>
    </div><br/>
    <div class="site_footer">Generated by <a href="http://www.valadoc.org/">Valadoc</a>
    </div>
  </body>
</html>